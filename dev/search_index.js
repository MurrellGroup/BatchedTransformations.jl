var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BatchedTransformations","category":"page"},{"location":"#BatchedTransformations","page":"Home","title":"BatchedTransformations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BatchedTransformations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BatchedTransformations]","category":"page"},{"location":"#BatchedTransformations.AbstractLinearMaps","page":"Home","title":"BatchedTransformations.AbstractLinearMaps","text":"AbstractLinearMaps <: Transformations\n\n\n\n\n\n","category":"type"},{"location":"#BatchedTransformations.ComposedTransformations","page":"Home","title":"BatchedTransformations.ComposedTransformations","text":"ComposedTransformations{Outer<:Transformations,Inner<:Transformations}\n\nA ComposedTransformations contains two transformations t2 and t1 that are composed. It can be constructed with compose(t2, t1), t2 ∘ t1, and t2(t1), where t1 is the transformation to be applied first, and t2 second.\n\n\n\n\n\n","category":"type"},{"location":"#BatchedTransformations.InverseTransformations","page":"Home","title":"BatchedTransformations.InverseTransformations","text":"InverseTransformations{T<:Transformations}\n\nA InverseTransformations represents a lazy inverse of a Transformations t.\n\ninverse(t) is a lazy inverse that defaults to inv(t) when evaluated. transform(inverse(t), x) is equivalent to inverse_transform(t, x). This allows for specialized inverse transform implementations that don't require the inverse to be computed explicitly.\n\n\n\n\n\n","category":"type"},{"location":"#BatchedTransformations.LinearMaps","page":"Home","title":"BatchedTransformations.LinearMaps","text":"LinearMaps{A<:AbstractArray} <: AbstractLinearMaps\n\n\n\n\n\n","category":"type"},{"location":"#BatchedTransformations.Rotations","page":"Home","title":"BatchedTransformations.Rotations","text":"Rotations{A<:AbstractArray} <: AbstractLinearMaps\n\n\n\n\n\n","category":"type"},{"location":"#BatchedTransformations.Transformations","page":"Home","title":"BatchedTransformations.Transformations","text":"Transformations\n\nAn abstract type whose concrete subtypes contain batches of transformations that can be applied to an array. A Transformations t can be applied to x with transform(t, x), t * x, andt(x).\n\n\n\n\n\n","category":"type"},{"location":"#BatchedTransformations.Translations","page":"Home","title":"BatchedTransformations.Translations","text":"Translations{A<:AbstractArray} <: Transformations\n\n\n\n\n\n","category":"type"},{"location":"#Core.Type-Tuple{Translations, AbstractLinearMaps}","page":"Home","title":"Core.Type","text":"AffineMaps(translations::Translations, linear::AbstractLinearMaps)\n\n\n\n\n\n","category":"method"},{"location":"#Core.Type-Tuple{Translations, Rotations}","page":"Home","title":"Core.Type","text":"RigidTransformations(translations::Translations, rotations::Rotations)\n\n\n\n\n\n","category":"method"},{"location":"#BatchedTransformations.compose-Tuple{Transformations, Transformations}","page":"Home","title":"BatchedTransformations.compose","text":"compose(t2, t1)\nt2 ∘ t1\n\n\n\n\n\n","category":"method"},{"location":"#BatchedTransformations.transform-Tuple{Transformations, Any}","page":"Home","title":"BatchedTransformations.transform","text":"transform(t, x)\nt * x\nt(x)\n\n\n\n\n\n","category":"method"},{"location":"#BatchedTransformations.transform-Tuple{Transformations, Transformations}","page":"Home","title":"BatchedTransformations.transform","text":"transform(t2, t1)\n\nA non-lazy composition that instantiates a new transformation.\n\n\n\n\n\n","category":"method"}]
}
